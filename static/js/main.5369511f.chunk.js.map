{"version":3,"sources":["logic/wargamingRequests.js","component/TankSelect.js","component/RelatedTankTable.js","App.js","serviceWorker.js","index.js"],"names":["makeWGGetRequest","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","data","dataString","res","wrap","_context","prev","next","process","keys","map","key","concat","encodeURIComponent","join","fetch","sent","json","abrupt","stop","this","_x","_x2","apply","arguments","getTanks","_ref2","_callee2","tanks","_context2","forEach","tankId","module_ids","modules_tree","_x3","getAllTanks","_ref3","_callee3","_context3","fields","getTanksById","_ref4","_callee4","tank_ids","_context4","tank_id","_x4","getModules","_ref5","_callee5","moduleIds","modules","_context5","module_id","_x5","TankSelect","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedTankId","related_tanks","setState","e","target","value","onSelectTank","_this2","react_default","createElement","className","htmlFor","onChange","bind","i","tank","name","React","Component","RelatedTankTable","tier","getDerivedStateFromProps","App","select_tank","tankModules","relatedTankIds","relatedTanks","selectedTank","flat","filter","index","indexOf","console","log","component_TankSelect","component_RelatedTankTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5369511f.chunk.js","sourcesContent":["const makeWGGetRequest = async (url, data) => {\r\n    data[\"application_id\"] = process.env.REACT_APP_WARGAMING_API_KEY;\r\n\r\n    const dataString = Object\r\n        .keys(data)\r\n        .map(key => `${key}=${encodeURIComponent(data[key])}`)\r\n        .join('&');\r\n    const res = await fetch(`${url}?${dataString}`);\r\n    return await res.json()\r\n}\r\n\r\nconst getTanks = async (data) => {\r\n    let tanks = await makeWGGetRequest('https://api.worldoftanks.com/wot/encyclopedia/vehicles/', data);\r\n    tanks =  tanks.data;\r\n\r\n    Object.keys(tanks).forEach(tankId => {\r\n        tanks[tankId].module_ids = Object.keys(tanks[tankId].modules_tree)\r\n    });\r\n\r\n    return tanks;\r\n}\r\n\r\nexport const getAllTanks = async () => {\r\n    const data = {\r\n        fields: 'modules_tree,name,nation,tank_id'\r\n    }\r\n    \r\n    return getTanks(data);\r\n}\r\n\r\nexport const getTanksById = async (tank_ids) => {\r\n    const data = {\r\n        fields: 'modules_tree,name,nation,tank_id,tier',\r\n        tank_id: tank_ids.join(),\r\n    }\r\n    \r\n    return getTanks(data);\r\n}\r\n\r\nexport const getModules = async (moduleIds) => {\r\n    const data = {\r\n        fields: 'module_id,name,tanks',\r\n        module_id: moduleIds.join(),\r\n    }\r\n    let modules = await makeWGGetRequest('https://api.worldoftanks.com/wot/encyclopedia/modules/', data)\r\n\r\n    return modules.data\r\n}","import React from \"react\";\r\nimport { getAllTanks } from '../logic/wargamingRequests'\r\n\r\nclass TankSelect extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      tanks: {},\r\n      selectedTankId: 'select',\r\n      related_tanks: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const tanks = await getAllTanks();\r\n    this.setState({ tanks });\r\n  }\r\n\r\n  onChange(e) {\r\n    const selectedTankId = e.target.value;\r\n    this.setState({\r\n      selectedTankId,\r\n    })\r\n    this.props.onSelectTank(this.state.tanks[selectedTankId])\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"selectTank\" >Tanks:</label>\r\n        <select value={this.state.selectedTankId} onChange={this.onChange.bind(this)} className=\"form-control\">\r\n          {Object.keys(this.state.tanks).map((tank_id, i) => {\r\n            const tank = this.state.tanks[tank_id];\r\n            return <option value={tank.tank_id} key={i} >{tank.name}</option>\r\n          })}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TankSelect;","import React from \"react\";\r\n\r\nclass RelatedTankTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      tanks: props.tanks,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps = (props) => {\r\n    return props\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form-group\">\r\n        <label>Related Tanks:</label>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Tier</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.state.tanks).map((tank_id, i) => {\r\n              const tank = this.state.tanks[tank_id];\r\n              return <tr key={i}>\r\n                  <td>\r\n                    {tank.name}\r\n                  </td>\r\n                  <td>\r\n                    {tank.tier}\r\n                  </td>\r\n                </tr>;\r\n            })}\r\n          </tbody>\r\n          \r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RelatedTankTable;","import React, { Component } from 'react';\nimport './App.css';\nimport TankSelect from './component/TankSelect'\nimport RelatedTankTable from './component/RelatedTankTable'\nimport { getModules, getTanksById } from './logic/wargamingRequests'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      relatedTanks: {},\n      selectedTank: null,\n      tanks: {},\n    };\n  }\n\n  select_tank = async (tank) => {\n    this.setState({\n      selectedTank: tank,\n    })\n    const tankModules = await getModules(tank.module_ids);\n    let relatedTankIds = Object.keys(tankModules)\n      .map(module_id => tankModules[module_id].tanks)\n      .flat();\n\n    relatedTankIds = relatedTankIds\n      .filter((tank_id, index) => {\n        return relatedTankIds.indexOf(tank_id) === index;\n      });\n\n    console.log(relatedTankIds)\n\n    const relatedTanks = await getTanksById(relatedTankIds);\n    this.setState({\n      relatedTanks,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TankSelect onSelectTank={this.select_tank}/>\n          <RelatedTankTable tanks={this.state.relatedTanks}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}